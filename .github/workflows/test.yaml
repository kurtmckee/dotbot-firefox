name: "Test"

on:
  pull_request:
  push:
    branches:
      - "main"
      - "releases"

jobs:
  build:
    name: "Build wheel"
    runs-on: "ubuntu-latest"
    outputs:
      wheel-filename: "${{ steps.get-filename.outputs.wheel-filename }}"
    steps:
      - name: "Checkout branch"
        uses: "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11" # v4.1.1

      - name: "Setup Python"
        id: "setup-python"
        uses: "actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c" # v5.0.0
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml

      - name: "Build the project"
        run: "pip wheel ."

      - name: "Identify the wheel filename"
        id: "get-filename"
        run: 'echo "wheel-filename=$(ls -1 dotbot_firefox*.whl | head -n 1)" >> $GITHUB_OUTPUT'

      - name: "Upload the build artifact"
        uses: "actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8" # v4.3.0
        with:
          name: "dotbot_firefox-${{ github.sha }}.whl"
          path: "${{ steps.get-filename.outputs.wheel-filename }}"
          retention-days: 1

  test:
    name: "Test on ${{ matrix.run.os.name }}"
    runs-on: "${{ matrix.run.os.id }}"
    needs: "build"

    strategy:
      matrix:
        run:
          - os:
              id: "ubuntu-latest"
              name: "Ubuntu"
            cpythons:
              - "3.8"
              - "3.9"
              - "3.10"
              - "3.11"
              - "3.12"

          # Test lowest and highest versions on Mac.
          - os:
              name: "MacOS"
              id: "macos-latest"
            cpythons:
              - "3.8"
              - "3.12"

          # Test lowest and highest versions on Windows.
          - os:
              id: "windows-latest"
              name: "Windows"
            cpythons:
              - "3.8"
              - "3.12"

    steps:
      - name: "Checkout branch"
        uses: "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11" # v4.1.1

      - name: "Setup Pythons"
        id: "setup-python"
        uses: "actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c" # v5.0.0
        with:
          python-version: "${{ join(matrix.run.cpythons, '\n') }}"
          allow-prereleases: true
          # Cache packages that pip downloads.
          # This does not cache the installed files.
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml
            tox.ini
            requirements/**/*.txt

      - name: "Detect Pythons"
        uses: "kurtmckee/detect-pythons@38187a5464f266e93e5c1467699f7be2bf521d2e" # v1.1.0

      - name: "Restore cache"
        id: "restore-cache"
        uses: "actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2" # v4.0.0
        with:
          path: |
            .mypy_cache/
            .tox/
            .venv/
          key: "test-os=${{ runner.os }}-hash=${{ hashFiles('.python-identifiers', 'pyproject.toml', 'tox.ini', 'requirements/**/*.txt') }}"

      - name: "Identify venv path"
        shell: "bash"
        run: "echo 'venv-path=.venv/${{ runner.os == 'Windows' && 'Scripts' || 'bin' }}' >> $GITHUB_ENV"

      - name: "Create a virtual environment"
        if: "steps.restore-cache.outputs.cache-hit == false"
        run: |
          python -m venv .venv
          ${{ env.venv-path }}/python -m pip install --upgrade pip setuptools wheel
          ${{ env.venv-path }}/pip install tox

      - name: "Download the build artifact"
        uses: "actions/download-artifact@6b208ae046db98c579e8a3aa621ab581ff575935" # v4.1.1
        with:
          name: "dotbot_firefox-${{ github.sha }}.whl"

      - name: "Test"
        run: |
          ${{ env.venv-path }}/tox run --colored yes --installpkg "${{ needs.build.outputs.wheel-filename }}" -e py${{ join(matrix.run.cpythons, ',py') }},coverage-report-ci,mypy
